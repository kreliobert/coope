//Variables
var currentlatitude;
var currentlongitude;
var map, infobox, tooltip;
var tooltipTemplate = '<div style="background-color:white;text-align:center;margin-top:-25px;border-radius: 25px;"><b>{title}</b></div>';
var branchlatitude;
var branchlongitude;
var directionsManager;


function StartSgEngine(dotnetHelper) {
    window.LoginGlobalDotNet = dotnetHelper;
    StartSignatureEngine(SignatureResponse);
}

function digitalSign(user)
{
    ConnectSignatureEngine(user, null);
}


function SignatureResponse(status, gfsRefNumber) {
    window.LoginGlobalDotNet.invokeMethodAsync('DigitalSignLogin', gfsRefNumber);
}


function StartSgEngineCreateUser(dotnetHelper) {
    window.CreateUserGlobalDotNet = dotnetHelper;
    StartSignatureEngine(SignatureResponseCreateUser);
}


function SignatureResponseCreateUser(status, gfsRefNumber) {
    window.CreateUserGlobalDotNet.invokeMethodAsync('RegisterUserDigitalSign', gfsRefNumber);
}

function StartSgEngineCallback(dotnetHelper) {
    window.LoginGlobalDotNet = dotnetHelper;
    StartSignatureEngine(SignatureCallbackResponse);
}

function SignatureCallbackResponse(status, gfsRefNumber) {
    window.LoginGlobalDotNet.invokeMethodAsync('DigitalSignCallback', gfsRefNumber);
}

function setPopover(_target, _content, _title, _position, istooltip) {

    $('#' + _target).popover({
        html: true,
        content: function () {
            return $("#popover_content_" + _target).html();
        },
        placement: _position,
        trigger: istooltip === "1" ? 'hover' : 'focus'
    });
}

function mask(_id, _mask) {
    $("#" + _id).mask(_mask);
}

function maskReverse(_id, _mask) {
    $("#" + _id).mask(_mask, { reverse: true });
}

function openInNewTab(url) {
    var win = window.open(url, '_blank');
    win.focus();
}

function setPopoverContent(id) {
    return document.getElementById(id).innerHTML;
}

function showCollapse(target) {
    $(".panel-collapse").removeClass("show");
    $('.panel-collapse').collapse("hide");
    $('#' + target).addClass("show");
}

function setClassElement(id) {
    $(".card").removeClass("category-item-active");
    $("#itemmenu" + id).addClass("category-item-active");
}

function hideCollapse(target) {
    $('.panel-collapse').collapse("hide");
}

function BlazorFocusElement(element) {
    if (element instanceof HTMLElement) {
        element.focus();
    }
}

function printSelection(id) {
    var ficha = document.getElementById(id);
    var ventimp = window.open(' ', 'popimpr');
    ventimp.document.write(ficha.innerHTML);
    ventimp.document.close();
    ventimp.print();
    ventimp.close();
}



//Maps Functions-----

function GetMap(id) {

    if ($('#' + id).length > 0) {

        map = new Microsoft.Maps.Map('#' + id, {
            credentials: "uGAkBenK71FzB1sa2ps3~WlTwB-4mSm6XlT4e0VHeiA~Am_kQT3U4gAEqDpgPzgPAD4uK0021UZweJXHY5ZVNL1cmgZH_cWG0RYQWanJodym",
            center: new Microsoft.Maps.Location(9.750, -84.620),
            mapTypeId: Microsoft.Maps.MapTypeId.road,
            zoom: 8,
            enableHighDpi: true,
            showCopyright: false
        });

        tooltip = new Microsoft.Maps.Infobox(map.getCenter(), {
            visible: false,
            showPointer: false,
            showCloseButton: false,
            offset: new Microsoft.Maps.Point(-75, 10)
        });

        tooltip.setMap(map);

        //Create an infobox for displaying detailed information.
        infobox = new Microsoft.Maps.Infobox(map.getCenter(), {
            visible: false
        });

        infobox.setMap(map);

        getLocation();

    }
}

function getLocation() {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(getPosition);
    } 
}

function getPosition(position) {
    currentlatitude = position.coords.latitude;
    currentlongitude = position.coords.longitude;
}

function addMarker(latitude, longitude, title, description) {
    var marker = new Microsoft.Maps.Pushpin(new Microsoft.Maps.Location(latitude, longitude), { icon: "https://maps.google.com/mapfiles/ms/icons/blue-dot.png" });

    marker.title = title;
    marker.description = description;
    marker.text = '1';

    marker.metadata = {
        title: title,
        description: description
    };
    map.entities.push(marker);

    Microsoft.Maps.Events.addHandler(marker, 'click', markerClicked);

    Microsoft.Maps.Events.addHandler(marker, 'mouseover', markerHovered);
};

function markerClicked(e) {
    branchlatitude = e.target.getLocation().latitude;
    branchlongitude = e.target.getLocation().longitude;

    getRoad();

    window.MapGlobalDotNet.invokeMethodAsync('getInfoBranchClicked', e.target.description);
}

function getRoad() {
    Microsoft.Maps.loadModule('Microsoft.Maps.Directions', { callback: directionsModuleLoaded });
};

function directionsModuleLoaded() {

    if (directionsManager) {
        directionsManager.dispose();
    }

    directionsManager = new Microsoft.Maps.Directions.DirectionsManager(map);

    var startWaypoint = new Microsoft.Maps.Directions.Waypoint({ address: 'Ruta1', location: new Microsoft.Maps.Location(currentlatitude, currentlongitude) });
    var endWaypoint = new Microsoft.Maps.Directions.Waypoint({ address: 'Ruta2', location: new Microsoft.Maps.Location(branchlatitude, branchlongitude) });

    directionsManager.addWaypoint(startWaypoint);
    directionsManager.addWaypoint(endWaypoint);

    directionsManager.setRequestOptions({ avoidTraffic: true, routeOptimization: Microsoft.Maps.Directions.RouteOptimization.shortestDistance });

    directionsManager.setRenderOptions({ itineraryContainer: document.getElementById('directionsmap') });

    Microsoft.Maps.Events.addHandler(directionsManager, 'directionsError', displayError);

    directionsManager.calculateDirections();

}

function displayError(e) {
}

function mapHelper(dotnetHelper) {
    window.MapGlobalDotNet = dotnetHelper;
    return dotnetHelper.invokeMethodAsync('InitMap')
        .then(r => console.log(r));
}

function markerHovered(e) {
    //Hide the infobox
    infobox.setOptions({ visible: false });

    //Make sure the infobox has metadata to display.
    if (e.target.metadata) {
        //Set the infobox options with the metadata of the pushpin.
        tooltip.setOptions({
            location: e.target.getLocation(),
            htmlContent: tooltipTemplate.replace('{title}', e.target.metadata.title),
            visible: true
        });
    }
}

//Fin Maps Functions-----


//SliderBar Functions---------

function updateSliderToolText(text, id) {

    $("#" + id).slider('setAttribute', 'formatter', function (value) {
        return value + ' ' + text;
    });    
}

function updateSliderMinMax(minvalue, maxvalue, id) {

    $("#" + id).slider('setAttribute', 'min', Number(minvalue));
    $("#" + id).slider('setAttribute', 'max', Number(maxvalue));
    $("#" + id).slider('setValue', Number(minvalue));
}

function initSlider(tooltext, id) {
    $(document).ready(function () {
        window.mySlider = $("#" + id).slider({
            tooltip_position: 'bottom',
            tooltip: 'always',
            formatter: function (value) {
                return value + ' ' + tooltext;
            }
        });

        $("#" + id).on("slide", function (slideEvt) {
            window.sliderGlobalDotNet.invokeMethodAsync('getSliderValueClicked', slideEvt.value);
        });

    });
}

function sliderHelper(dotnetHelper) {
    window.sliderGlobalDotNet = dotnetHelper;
}
//Fin SliderBar Functions---------


// Blazor Scroll to Id
function scrollToId(id) {
    const element = document.getElementById(id);
    if (element instanceof HTMLElement) {
        element.scrollIntoView({
            behavior: 'smooth',
            block: 'start',
            inline: 'nearest'
        });
    }
}

function getCookie(cname) {
    var name = cname + "=";
    var decodedCookie = decodeURIComponent(document.cookie);
    var ca = decodedCookie.split(';');
    for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) == ' ') {
            c = c.substring(1);
        }
        if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
        }
    }
    return "";
}

function BlazorDownloadFile(filename, contentType, content) {
    
    const data = base64DecToArr(content);

    // Create the URL
    const file = new File([data], filename, { type: contentType });
    const exportUrl = URL.createObjectURL(file);

    // Create the <a> element and click on it
    const a = document.createElement("a");
    document.body.appendChild(a);
    a.href = exportUrl;
    a.download = filename;
    a.target = "_self";
    a.click();

    // We don't need to keep the url, let's release the memory    
    URL.revokeObjectURL(exportUrl);
}

// Convert a base64 string to a Uint8Array. 
function b64ToUint6(nChr) {
    return nChr > 64 && nChr < 91 ? nChr - 65 : nChr > 96 && nChr < 123 ? nChr - 71 : nChr > 47 && nChr < 58 ? nChr + 4 : nChr === 43 ? 62 : nChr === 47 ? 63 : 0;
}

function base64DecToArr(sBase64, nBlocksSize) {
    var
        sB64Enc = sBase64.replace(/[^A-Za-z0-9\+\/]/g, ""),
        nInLen = sB64Enc.length,
        nOutLen = nBlocksSize ? Math.ceil((nInLen * 3 + 1 >> 2) / nBlocksSize) * nBlocksSize : nInLen * 3 + 1 >> 2,
        taBytes = new Uint8Array(nOutLen);

    for (var nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {
        nMod4 = nInIdx & 3;
        nUint24 |= b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;
        if (nMod4 === 3 || nInLen - nInIdx === 1) {
            for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {
                taBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;
            }
            nUint24 = 0;
        }
    }
    return taBytes;
}

function BlazorDownloadFileFast(name, contentType, content) {
    // Convert the parameters to actual JS types
    const nameStr = BINDING.conv_string(name);
    const contentTypeStr = BINDING.conv_string(contentType);
    const contentArray = Blazor.platform.toUint8Array(content);

    // Create the URL
    const file = new File([contentArray], nameStr, { type: contentTypeStr });
    const exportUrl = URL.createObjectURL(file);

    // Create the <a> element and click on it
    const a = document.createElement("a");
    document.body.appendChild(a);
    a.href = exportUrl;
    a.download = nameStr;
    a.target = "_self";
    a.click();

    // We don't need to keep the url, let's release the memory
    // On Safari it seems you need to comment this line... (please let me know if you know why)
    URL.revokeObjectURL(exportUrl);
}